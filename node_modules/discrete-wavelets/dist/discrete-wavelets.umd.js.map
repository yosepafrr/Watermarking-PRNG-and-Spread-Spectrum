{"version":3,"file":"discrete-wavelets.umd.js","sources":["../src/padding/symmetric/symmetric.ts","../src/padding/antisymmetric/antisymmetric.ts","../src/padding/constant/constant.ts","../src/padding/periodic/periodic.ts","../src/padding/reflect/reflect.ts","../src/padding/smooth/smooth.ts","../src/padding/zero/zero.ts","../src/padding/padding.ts","../src/wavelets/daubechies/daubechies.ts","../src/wavelets/wavelets.ts","../src/helpers.ts","../src/wt.ts"],"sourcesContent":["import { PaddingMode } from '../padding';\r\n\r\n/**\r\n * Symmetric padding.\r\n */\r\nexport const SYMMETRIC_PADDING: PaddingMode = 'symmetric';\r\n\r\n/**\r\n * Returns a single value of symmetric padding.\r\n * \r\n * @param  data    Input values.\r\n * @param  index   Index of padding.\r\n * @param  inverse True if the direction should be inversed.\r\n * @return         Single padding value.\r\n */\r\nexport function symmetricPadding(\r\n  data: ReadonlyArray<number>,\r\n  index: number,\r\n  inverse: boolean = false,\r\n): number {\r\n  /* Check if data has length larger than zero. */\r\n  if (data.length === 0) {\r\n    throw new Error(\r\n      'Cannot determine symmetric padding for data of zero length.'\r\n    );\r\n  }\r\n\r\n  /* Determine symmetric padding. */\r\n  const dirChanges: number = Math.floor(index / data.length);\r\n  const inversions: number = (inverse) ? dirChanges : dirChanges + 1;\r\n  return (inversions % 2 === 0)\r\n    ? data[index % data.length]\r\n    : data[data.length - 1 - (index % data.length)];\r\n};\r\n","import { PaddingMode } from '../padding';\r\nimport { symmetricPadding } from '../symmetric/symmetric';\r\n\r\n/**\r\n * Antisymmetric padding.\r\n */\r\nexport const ANTISYMMETRIC_PADDING: PaddingMode = 'antisymmetric';\r\n\r\n/**\r\n * Returns a single value of antisymmetric padding.\r\n * \r\n * @param  data    Input values.\r\n * @param  index   Index of padding.\r\n * @param  inverse True if the direction should be inversed.\r\n * @return         Single padding value.\r\n */\r\nexport function antisymmetricPadding(\r\n  data: ReadonlyArray<number>,\r\n  index: number,\r\n  inverse: boolean = false,\r\n): number {\r\n  const dirChanges: number = Math.floor(index / data.length);\r\n  const sign: number = (dirChanges % 2 === 0) ? -1 : 1;\r\n  return sign * symmetricPadding(data, index, inverse);\r\n};\r\n","import { PaddingMode } from '../padding';\r\n\r\n/**\r\n * Constant padding.\r\n */\r\nexport const CONSTANT_PADDING: PaddingMode = 'constant';\r\n\r\n/**\r\n * Returns a single value of constant padding.\r\n * \r\n * @param  data    Input values.\r\n * @param  inverse True if the direction should be inversed.\r\n * @return         Single padding value.\r\n */\r\nexport function constantPadding(\r\n  data: ReadonlyArray<number>,\r\n  inverse: boolean = false,\r\n): number {\r\n  /* Check if data has length larger than zero. */\r\n  if (data.length === 0) {\r\n    throw new Error(\r\n      'Cannot determine constant padding for data of zero length.'\r\n    );\r\n  }\r\n\r\n  /* Determine constant padding. */\r\n  return (!inverse)\r\n    ? data[data.length - 1]\r\n    : data[0];\r\n};\r\n","import { PaddingMode } from '../padding';\r\n\r\n/**\r\n * Periodic padding.\r\n */\r\nexport const PERIODIC_PADDING: PaddingMode = 'periodic';\r\n\r\n/**\r\n * Returns a single value of periodic padding.\r\n * \r\n * @param  data    Input values.\r\n * @param  index   Index of padding.\r\n * @param  inverse True if the direction should be inversed.\r\n * @return         Single padding value.\r\n */\r\nexport function periodicPadding(\r\n  data: ReadonlyArray<number>,\r\n  index: number,\r\n  inverse: boolean = false,\r\n): number {\r\n  /* Check if data has length larger than zero. */\r\n  if (data.length === 0) {\r\n    throw new Error(\r\n      'Cannot determine periodic padding for data of zero length.'\r\n    );\r\n  }\r\n\r\n  /* Determine periodic padding. */\r\n  return (!inverse)\r\n    ? data[index % data.length]\r\n    : data[data.length - 1 - (index % data.length)];\r\n};\r\n","import { PaddingMode } from '../padding';\r\n\r\n/**\r\n * Reflect padding.\r\n */\r\nexport const REFLECT_PADDING: PaddingMode = 'reflect';\r\n\r\n/**\r\n * Returns a single value of reflect padding.\r\n * \r\n * @param  data    Input values.\r\n * @param  index   Index of padding.\r\n * @param  inverse True if the direction should be inversed.\r\n * @return         Single padding value.\r\n */\r\nexport function reflectPadding(\r\n  data: ReadonlyArray<number>,\r\n  index: number,\r\n  inverse: boolean = false,\r\n): number {\r\n  /* Check if data has length larger than zero. */\r\n  if (data.length === 0) {\r\n    throw new Error(\r\n      'Cannot determine reflect padding for data of zero length.'\r\n    );\r\n  }\r\n\r\n  /* Return constant value for data of length one. */\r\n  if (data.length === 1) return data[0];\r\n\r\n  /* Determine reflect padding. */\r\n  const dirChanges: number = Math.floor(index / (data.length - 1));\r\n  const inversions: number = (inverse) ? dirChanges : dirChanges + 1;\r\n  return (inversions % 2 === 0)\r\n    ? data[index % (data.length - 1) + 1]\r\n    : data[data.length - 2 - (index % (data.length - 1))];\r\n};\r\n","import { PaddingMode } from '../padding';\r\n\r\n/**\r\n * Smooth padding.\r\n */\r\nexport const SMOOTH_PADDING: PaddingMode = 'smooth';\r\n\r\n/**\r\n * Returns a single value of smooth padding.\r\n * \r\n * @param  data    Input values.\r\n * @param  index   Index of padding.\r\n * @param  inverse True if the direction should be inversed.\r\n * @return         Single padding value.\r\n */\r\nexport function smoothPadding(\r\n  data: ReadonlyArray<number>,\r\n  index: number,\r\n  inverse: boolean = false,\r\n): number {\r\n  /* Check if data has length larger than zero. */\r\n  if (data.length === 0) {\r\n    throw new Error('Cannot determine smooth padding for data of zero length.');\r\n  }\r\n\r\n  /* Determine line equation. */\r\n  const end: number = data.length - 1;\r\n  const offset: number = (inverse) ? data[0] : data[end];\r\n  const slope: number = (inverse)\r\n    ? (data.length === 1) ? data[0] : data[0] - data[1]\r\n    : (data.length === 1) ? -data[0] : data[end] - data[end - 1];\r\n  return offset + (index + 1) * slope;\r\n};\r\n","import { PaddingMode } from '../padding';\r\n\r\n/**\r\n * Zero padding.\r\n */\r\nexport const ZERO_PADDING: PaddingMode = 'zero';\r\n\r\n/**\r\n * Returns a single value of zero padding.\r\n * \r\n * @return         Single padding value.\r\n */\r\nexport function zeroPadding(): number {\r\n  return 0;\r\n};\r\n","export { antisymmetricPadding } from './antisymmetric/antisymmetric';\r\nexport { constantPadding } from './constant/constant';\r\nexport { periodicPadding } from './periodic/periodic';\r\nexport { reflectPadding } from './reflect/reflect';\r\nexport { smoothPadding } from './smooth/smooth';\r\nexport { symmetricPadding } from './symmetric/symmetric';\r\nexport { zeroPadding } from './zero/zero';\r\n\r\nimport { ANTISYMMETRIC_PADDING } from './antisymmetric/antisymmetric';\r\nimport { CONSTANT_PADDING } from './constant/constant';\r\nimport { PERIODIC_PADDING } from './periodic/periodic';\r\nimport { REFLECT_PADDING } from './reflect/reflect';\r\nimport { SMOOTH_PADDING } from './smooth/smooth';\r\nimport { SYMMETRIC_PADDING } from './symmetric/symmetric';\r\nimport { ZERO_PADDING } from './zero/zero';\r\n\r\n/**\r\n * Signal extension mode.\r\n */\r\nexport type PaddingMode =\r\n    'antisymmetric'\r\n    | 'constant'\r\n    | 'periodic'\r\n    | 'reflect'\r\n    | 'smooth'\r\n    | 'symmetric'\r\n    | 'zero';\r\n\r\n/**\r\n * Interface of supported padding mode.\r\n */\r\nexport interface PaddingModes {\r\n  antisymmetric: PaddingMode;\r\n  constant: PaddingMode;\r\n  modes: PaddingMode[];\r\n  periodic: PaddingMode;\r\n  reflect: PaddingMode;\r\n  smooth: PaddingMode;\r\n  symmetric: PaddingMode;\r\n  zero: PaddingMode;\r\n}\r\n\r\n/**\r\n * Supported signal extension modes.\r\n */\r\nexport const PADDING_MODES: Readonly<PaddingModes> = {\r\n  antisymmetric: ANTISYMMETRIC_PADDING,\r\n  constant: CONSTANT_PADDING,\r\n  periodic: PERIODIC_PADDING,\r\n  reflect: REFLECT_PADDING,\r\n  smooth: SMOOTH_PADDING,\r\n  symmetric: SYMMETRIC_PADDING,\r\n  zero: ZERO_PADDING,\r\n  modes: [\r\n    ZERO_PADDING,\r\n    CONSTANT_PADDING,\r\n    SYMMETRIC_PADDING,\r\n    PERIODIC_PADDING,\r\n    SMOOTH_PADDING,\r\n    REFLECT_PADDING,\r\n    ANTISYMMETRIC_PADDING,\r\n  ],\r\n};\r\n\r\n/**\r\n * Number of padded values at front and back.\r\n */\r\nexport type PaddingWidths = [number, number];\r\n","// SOURCE: https://github.com/PyWavelets/pywt/blob/master/pywt/_extensions/c/wavelets_coeffs.template.h\r\n\r\n/**\r\n * Haar wavelet scaling numbers.\r\n */\r\nexport const HaarWavelet: ReadonlyArray<number> = [\r\n  1 / Math.SQRT2,\r\n  1 / Math.SQRT2\r\n];\r\n\r\n/**\r\n * Daubechies 2 scaling numbers.\r\n */\r\nexport const Db2Wavelet: ReadonlyArray<number> = [\r\n  (1 + Math.sqrt(3)) / (4 * Math.SQRT2),\r\n  (3 + Math.sqrt(3)) / (4 * Math.SQRT2),\r\n  (3 - Math.sqrt(3)) / (4 * Math.SQRT2),\r\n  (1 - Math.sqrt(3)) / (4 * Math.SQRT2)\r\n];\r\n\r\n/**\r\n * Daubechies 3 scaling numbers.\r\n */\r\nexport const Db3Wavelet: ReadonlyArray<number> = [\r\n  3.326705529500826159985115891390056300129233992450683597084705e-01,\r\n  8.068915093110925764944936040887134905192973949948236181650920e-01,\r\n  4.598775021184915700951519421476167208081101774314923066433867e-01,\r\n  -1.350110200102545886963899066993744805622198452237811919756862e-01,\r\n  -8.544127388202666169281916918177331153619763898808662976351748e-02,\r\n  3.522629188570953660274066471551002932775838791743161039893406e-02\r\n];\r\n\r\n/**\r\n * Daubechies 4 scaling numbers.\r\n */\r\nexport const Db4Wavelet: ReadonlyArray<number> = [\r\n  2.303778133088965008632911830440708500016152482483092977910968e-01,\r\n  7.148465705529156470899219552739926037076084010993081758450110e-01,\r\n  6.308807679298589078817163383006152202032229226771951174057473e-01,\r\n  -2.798376941685985421141374718007538541198732022449175284003358e-02,\r\n  -1.870348117190930840795706727890814195845441743745800912057770e-01,\r\n  3.084138183556076362721936253495905017031482172003403341821219e-02,\r\n  3.288301166688519973540751354924438866454194113754971259727278e-02,\r\n  -1.059740178506903210488320852402722918109996490637641983484974e-02\r\n];\r\n\r\n/**\r\n * Daubechies 5 scaling numbers.\r\n */\r\nexport const Db5Wavelet: ReadonlyArray<number> = [\r\n  1.601023979741929144807237480204207336505441246250578327725699e-01,\r\n  6.038292697971896705401193065250621075074221631016986987969283e-01,\r\n  7.243085284377729277280712441022186407687562182320073725767335e-01,\r\n  1.384281459013207315053971463390246973141057911739561022694652e-01,\r\n  -2.422948870663820318625713794746163619914908080626185983913726e-01,\r\n  -3.224486958463837464847975506213492831356498416379847225434268e-02,\r\n  7.757149384004571352313048938860181980623099452012527983210146e-02,\r\n  -6.241490212798274274190519112920192970763557165687607323417435e-03,\r\n  -1.258075199908199946850973993177579294920459162609785020169232e-02,\r\n  3.335725285473771277998183415817355747636524742305315099706428e-03\r\n];\r\n\r\n/**\r\n * Daubechies 6 scaling numbers.\r\n */\r\nexport const Db6Wavelet: ReadonlyArray<number> = [\r\n  1.115407433501094636213239172409234390425395919844216759082360e-01,\r\n  4.946238903984530856772041768778555886377863828962743623531834e-01,\r\n  7.511339080210953506789344984397316855802547833382612009730420e-01,\r\n  3.152503517091976290859896548109263966495199235172945244404163e-01,\r\n  -2.262646939654398200763145006609034656705401539728969940143487e-01,\r\n  -1.297668675672619355622896058765854608452337492235814701599310e-01,\r\n  9.750160558732304910234355253812534233983074749525514279893193e-02,\r\n  2.752286553030572862554083950419321365738758783043454321494202e-02,\r\n  -3.158203931748602956507908069984866905747953237314842337511464e-02,\r\n  5.538422011614961392519183980465012206110262773864964295476524e-04,\r\n  4.777257510945510639635975246820707050230501216581434297593254e-03,\r\n  -1.077301085308479564852621609587200035235233609334419689818580e-03\r\n];\r\n\r\n/**\r\n * Daubechies 7 scaling numbers.\r\n */\r\nexport const Db7Wavelet: ReadonlyArray<number> = [\r\n  7.785205408500917901996352195789374837918305292795568438702937e-02,\r\n  3.965393194819173065390003909368428563587151149333287401110499e-01,\r\n  7.291320908462351199169430703392820517179660611901363782697715e-01,\r\n  4.697822874051931224715911609744517386817913056787359532392529e-01,\r\n  -1.439060039285649754050683622130460017952735705499084834401753e-01,\r\n  -2.240361849938749826381404202332509644757830896773246552665095e-01,\r\n  7.130921926683026475087657050112904822711327451412314659575113e-02,\r\n  8.061260915108307191292248035938190585823820965629489058139218e-02,\r\n  -3.802993693501441357959206160185803585446196938467869898283122e-02,\r\n  -1.657454163066688065410767489170265479204504394820713705239272e-02,\r\n  1.255099855609984061298988603418777957289474046048710038411818e-02,\r\n  4.295779729213665211321291228197322228235350396942409742946366e-04,\r\n  -1.801640704047490915268262912739550962585651469641090625323864e-03,\r\n  3.537137999745202484462958363064254310959060059520040012524275e-04\r\n];\r\n\r\n/**\r\n * Daubechies 8 scaling numbers.\r\n */\r\nexport const Db8Wavelet: ReadonlyArray<number> = [\r\n  5.441584224310400995500940520299935503599554294733050397729280e-02,\r\n  3.128715909142999706591623755057177219497319740370229185698712e-01,\r\n  6.756307362972898068078007670471831499869115906336364227766759e-01,\r\n  5.853546836542067127712655200450981944303266678053369055707175e-01,\r\n  -1.582910525634930566738054787646630415774471154502826559735335e-02,\r\n  -2.840155429615469265162031323741647324684350124871451793599204e-01,\r\n  4.724845739132827703605900098258949861948011288770074644084096e-04,\r\n  1.287474266204784588570292875097083843022601575556488795577000e-01,\r\n  -1.736930100180754616961614886809598311413086529488394316977315e-02,\r\n  -4.408825393079475150676372323896350189751839190110996472750391e-02,\r\n  1.398102791739828164872293057263345144239559532934347169146368e-02,\r\n  8.746094047405776716382743246475640180402147081140676742686747e-03,\r\n  -4.870352993451574310422181557109824016634978512157003764736208e-03,\r\n  -3.917403733769470462980803573237762675229350073890493724492694e-04,\r\n  6.754494064505693663695475738792991218489630013558432103617077e-04,\r\n  -1.174767841247695337306282316988909444086693950311503927620013e-04\r\n];\r\n\r\n/**\r\n * Daubechies 9 scaling numbers.\r\n */\r\nexport const Db9Wavelet: ReadonlyArray<number> = [\r\n  3.807794736387834658869765887955118448771714496278417476647192e-02,\r\n  2.438346746125903537320415816492844155263611085609231361429088e-01,\r\n  6.048231236901111119030768674342361708959562711896117565333713e-01,\r\n  6.572880780513005380782126390451732140305858669245918854436034e-01,\r\n  1.331973858250075761909549458997955536921780768433661136154346e-01,\r\n  -2.932737832791749088064031952421987310438961628589906825725112e-01,\r\n  -9.684078322297646051350813353769660224825458104599099679471267e-02,\r\n  1.485407493381063801350727175060423024791258577280603060771649e-01,\r\n  3.072568147933337921231740072037882714105805024670744781503060e-02,\r\n  -6.763282906132997367564227482971901592578790871353739900748331e-02,\r\n  2.509471148314519575871897499885543315176271993709633321834164e-04,\r\n  2.236166212367909720537378270269095241855646688308853754721816e-02,\r\n  -4.723204757751397277925707848242465405729514912627938018758526e-03,\r\n  -4.281503682463429834496795002314531876481181811463288374860455e-03,\r\n  1.847646883056226476619129491125677051121081359600318160732515e-03,\r\n  2.303857635231959672052163928245421692940662052463711972260006e-04,\r\n  -2.519631889427101369749886842878606607282181543478028214134265e-04,\r\n  3.934732031627159948068988306589150707782477055517013507359938e-05\r\n];\r\n\r\n/**\r\n * Daubechies 10 scaling numbers.\r\n */\r\nexport const Db10Wavelet: ReadonlyArray<number> = [\r\n  2.667005790055555358661744877130858277192498290851289932779975e-02,\r\n  1.881768000776914890208929736790939942702546758640393484348595e-01,\r\n  5.272011889317255864817448279595081924981402680840223445318549e-01,\r\n  6.884590394536035657418717825492358539771364042407339537279681e-01,\r\n  2.811723436605774607487269984455892876243888859026150413831543e-01,\r\n  -2.498464243273153794161018979207791000564669737132073715013121e-01,\r\n  -1.959462743773770435042992543190981318766776476382778474396781e-01,\r\n  1.273693403357932600826772332014009770786177480422245995563097e-01,\r\n  9.305736460357235116035228983545273226942917998946925868063974e-02,\r\n  -7.139414716639708714533609307605064767292611983702150917523756e-02,\r\n  -2.945753682187581285828323760141839199388200516064948779769654e-02,\r\n  3.321267405934100173976365318215912897978337413267096043323351e-02,\r\n  3.606553566956169655423291417133403299517350518618994762730612e-03,\r\n  -1.073317548333057504431811410651364448111548781143923213370333e-02,\r\n  1.395351747052901165789318447957707567660542855688552426721117e-03,\r\n  1.992405295185056117158742242640643211762555365514105280067936e-03,\r\n  -6.858566949597116265613709819265714196625043336786920516211903e-04,\r\n  -1.164668551292854509514809710258991891527461854347597362819235e-04,\r\n  9.358867032006959133405013034222854399688456215297276443521873e-05,\r\n  -1.326420289452124481243667531226683305749240960605829756400674e-05\r\n];\r\n","export * from './daubechies/daubechies';\r\n\r\nimport {\r\n  Db2Wavelet,\r\n  Db3Wavelet,\r\n  Db4Wavelet,\r\n  Db5Wavelet,\r\n  Db6Wavelet,\r\n  Db7Wavelet,\r\n  Db8Wavelet,\r\n  Db9Wavelet,\r\n  Db10Wavelet,\r\n  HaarWavelet,\r\n} from './daubechies/daubechies';\r\n\r\n/**\r\n * Filters for a transform.\r\n */\r\nexport interface Filters {\r\n  \r\n  /**\r\n   * High-pass filter.\r\n   */\r\n  high: number[];\r\n\r\n  /**\r\n   * Low-pass filter.\r\n   */\r\n  low: number[];\r\n};\r\n\r\n/**\r\n * A wavelet, which can either be described by a wavelet basis or a wavelet\r\n * type.\r\n */\r\nexport type Wavelet = WaveletBasis | WaveletType;\r\n\r\n/**\r\n * A wavelet basis.\r\n */\r\nexport interface WaveletBasis {\r\n\r\n  /**\r\n   * Decomposition filters.\r\n   */\r\n  dec: Filters;\r\n\r\n  /**\r\n   * Reconstruction filters.\r\n   */\r\n  rec: Filters;\r\n}\r\n\r\n/**\r\n * Mapping of wavelet type keys to scaling numbers.\r\n */\r\nexport const ScalingNumbers: { [key: string]: ReadonlyArray<number> } = {\r\n  'db1': HaarWavelet,\r\n  'db2': Db2Wavelet,\r\n  'db3': Db3Wavelet,\r\n  'db4': Db4Wavelet,\r\n  'db5': Db5Wavelet,\r\n  'db6': Db6Wavelet,\r\n  'db7': Db7Wavelet,\r\n  'db8': Db8Wavelet,\r\n  'db9': Db9Wavelet,\r\n  'db10': Db10Wavelet,\r\n  'D2': HaarWavelet,\r\n  'D4': Db2Wavelet,\r\n  'D6': Db3Wavelet,\r\n  'D8': Db4Wavelet,\r\n  'D10': Db5Wavelet,\r\n  'D12': Db6Wavelet,\r\n  'D14': Db7Wavelet,\r\n  'D16': Db8Wavelet,\r\n  'D18': Db9Wavelet,\r\n  'D20': Db10Wavelet,\r\n  'haar': HaarWavelet,\r\n};\r\n\r\n/**\r\n * Short forms for common wavelet bases.\r\n */\r\nexport type WaveletType =\r\n      'db1'  | 'D2'  | 'haar'\r\n    | 'db2'  | 'D4'\r\n    | 'db3'  | 'D6'\r\n    | 'db4'  | 'D8'\r\n    | 'db5'  | 'D10'\r\n    | 'db6'  | 'D12'\r\n    | 'db7'  | 'D14'\r\n    | 'db8'  | 'D16'\r\n    | 'db9'  | 'D18'\r\n    | 'db10' | 'D20';\r\n","import {\r\n  PaddingMode,\r\n  PaddingWidths,\r\n} from \"./wt\";\r\nimport {\r\n  antisymmetricPadding,\r\n  constantPadding,\r\n  PADDING_MODES,\r\n  periodicPadding,\r\n  reflectPadding,\r\n  smoothPadding,\r\n  symmetricPadding,\r\n  zeroPadding,\r\n} from \"./padding/padding\";\r\nimport {\r\n  Filters,\r\n  ScalingNumbers,\r\n  Wavelet,\r\n  WaveletBasis,\r\n} from \"./wavelets/wavelets\";\r\n\r\n/**\r\n * Calculates the element-wise sum of two arrays.\r\n * \r\n * @param  a First array.\r\n * @param  b Second array.\r\n * @return   Element-wise sum.\r\n */\r\nexport function add(\r\n  a: ReadonlyArray<number>,\r\n  b: ReadonlyArray<number>,\r\n): number[] {\r\n  /* Check for same length of arrays. */\r\n  if (a.length !== b.length) {\r\n    throw new Error('Both arrays have to have the same length.');\r\n  }\r\n\r\n  /* Calculate element-wise sum. */\r\n  return a.map((value, index) => value + b[index]);\r\n}\r\n\r\n/**\r\n * Asserts if approximation and detail coefficients are valid or throws an\r\n * error if they are invalid. \r\n * \r\n * @param  approx Approximation coefficients.\r\n * @param  detail Detail coefficients.\r\n * @return        True if the coefficients are valid, otherwise throws an error.\r\n */\r\nexport function assertValidApproxDetail(\r\n  approx: ReadonlyArray<number>,\r\n  detail: ReadonlyArray<number>,\r\n): boolean {\r\n  /* Check if coefficients have equal length. */\r\n  if (approx.length !== detail.length) {\r\n    throw new Error('Approximation and detail coefficients must have equal length.');\r\n  }\r\n\r\n  /* Check for coefficients of zero length. */\r\n  if (approx.length === 0) {\r\n    throw new Error('Approximation and detail coefficients must not have zero length.');\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Asserts if coefficients are valid or throws an error if they are invalid.\r\n * \r\n * @param  coeffs Coefficients to test.\r\n * @return        True if the coefficients are valid, otherwise throws an error.\r\n */\r\nexport function assertValidCoeffs(\r\n  coeffs: ReadonlyArray<ReadonlyArray<number>>,\r\n): boolean {\r\n  /* Check if at least an array of approximation coefficients is given. */\r\n  if (coeffs.length < 1) {\r\n    throw new Error(\r\n      'Invalid coefficients. Array length must not be zero.'\r\n    );\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Asserts if wavelet filters are valid or throws an error if they are invalid.\r\n * \r\n * @param  filters Wavelet filters to test.\r\n * @return         True if the wavelet filters are valid, otherwise throws an error.\r\n */\r\nexport function assertValidFilters(\r\n  filters: Readonly<Filters>,\r\n): boolean {\r\n  /* Check if high-pass and low-pass filters have equal length. */\r\n  if (filters.high.length !== filters.low.length) {\r\n    throw new Error('High-pass and low-pass filters have to have equal length.');\r\n  }\r\n\r\n  /* Check if filter length is larger than or equal to two. */\r\n  if (filters.low.length < 2) {\r\n    throw new Error('Wavelet filter length has to be larger than or equal to two.');\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n/**\r\n * Determines a wavelet basis from a wavelet type or basis.\r\n * \r\n * @param  wavelet Wavelet type or basis.\r\n * @return         Wavelet basis.\r\n */\r\nexport function basisFromWavelet(wavelet: Readonly<Wavelet>): WaveletBasis {\r\n  return (typeof wavelet !== 'string')\r\n    ? wavelet\r\n    : waveletFromScalingNumbers(ScalingNumbers[wavelet]); \r\n}\r\n\r\n/**\r\n * Creates an array and populates it.\r\n * \r\n * @param  length   Length of the array.\r\n * @param  populate Function to populate the array.\r\n * @return          Populated array with specified length.\r\n */\r\nexport function createArray(\r\n  length: number,\r\n  populate: number | ((index: number) => number) = 0,\r\n): number[] {\r\n  /* Check for non-integer length. */\r\n  if (!Number.isInteger(length)) {\r\n    throw new Error('Length has to be an integer.');\r\n  }\r\n\r\n  /* Check for length less than zero. */\r\n  if (length < 0) {\r\n    throw new Error('Length must not be smaller than zero.')\r\n  }\r\n\r\n  /* Create and populate array. */\r\n  return Array.apply(null, Array(length)).map((_, index) =>\r\n    (typeof populate === 'function')\r\n      ? populate(index)\r\n      : populate\r\n  );\r\n}\r\n\r\n/**\r\n * Calculates the dot product of two arrays.\r\n * \r\n * @param  a First array.\r\n * @param  b Second array.\r\n * @return   Dot product.\r\n */\r\nexport function dot(\r\n  a: ReadonlyArray<number>,\r\n  b: ReadonlyArray<number>,\r\n): number {\r\n  /* Check for same length of arrays. */\r\n  if (a.length !== b.length) {\r\n    throw new Error('Both arrays have to have the same length.');\r\n  }\r\n\r\n  /* Calculate dot product. */\r\n  return a.reduce((dot, value, index) => dot + value * b[index], 0);\r\n}\r\n\r\n/**\r\n * Multiplies an array with a scalar value.\r\n * \r\n * @param  scalar Scalar value.\r\n * @param  array  Array of numbers.\r\n * @return        Array multiplied with scalar value.\r\n */\r\nexport function mulScalar(\r\n  scalar: number,\r\n  array: ReadonlyArray<number>,\r\n): number[] {\r\n  return array.map(value => scalar * value);\r\n}\r\n\r\n/**\r\n * Returns a single padding element.\r\n * \r\n * @param  data    Input data.\r\n * @param  index   Index of padding element.\r\n * @param  inverse True if the padding direction is inversed.\r\n * @param  mode    Signal extension mode.\r\n * @return         Single padding element.\r\n */\r\nexport function padElement(\r\n  data: ReadonlyArray<number>,\r\n  index: number,\r\n  inverse: boolean,\r\n  mode: PaddingMode,\r\n): number {\r\n  switch (mode) {\r\n    case PADDING_MODES.antisymmetric:\r\n      return antisymmetricPadding(data, index, inverse);\r\n    case PADDING_MODES.constant:\r\n      return constantPadding(data, inverse);\r\n    case PADDING_MODES.periodic:\r\n      return periodicPadding(data, index, inverse);\r\n    case PADDING_MODES.reflect:\r\n      return reflectPadding(data, index, inverse);\r\n    case PADDING_MODES.smooth:\r\n      return smoothPadding(data, index, inverse);\r\n    case PADDING_MODES.symmetric:\r\n      return symmetricPadding(data, index, inverse);\r\n    case PADDING_MODES.zero:\r\n      return zeroPadding();\r\n    default:\r\n      throw new Error('Unknown signal extension mode: \"' + mode + '\"');\r\n  }\r\n}\r\n\r\n/**\r\n * Determines the padding widths.\r\n * \r\n * @param  dataLength   Length of signal.\r\n * @param  filterLength Length of filter.\r\n * @return              Padding widths.\r\n */\r\nexport function padWidths(\r\n  dataLength: number,\r\n  filterLength: number,\r\n): PaddingWidths {\r\n  /* Check for valid data length. */\r\n  if (dataLength <= 0) {\r\n    throw new Error('Cannot determine padding widths for data of length less than or equal to zero.');\r\n  }\r\n\r\n  /* Check for valid filter length. */\r\n  if (filterLength < 2) {\r\n    throw new Error('Cannot determine padding widths for filter of length less than two.');\r\n  }\r\n\r\n  /* Determine padding widths. */\r\n  return [\r\n    filterLength - 2,\r\n    ((dataLength + filterLength) % 2 === 0)\r\n      ? filterLength - 2\r\n      : filterLength - 1\r\n  ];\r\n}\r\n\r\n/**\r\n * Determines a wavelet basis from scaling numbers.\r\n * \r\n * @param  scalingNumbers Wavelet scaling numbers.\r\n * @return                Wavelet basis.\r\n */\r\nexport function waveletFromScalingNumbers(\r\n  scalingNumbers: ReadonlyArray<number>,\r\n): WaveletBasis {\r\n  /* Check if length is larger than or equal to two. */\r\n  if (scalingNumbers.length < 2) {\r\n    throw new Error(\r\n      'Scaling numbers length has to be larger than or equal to two.'\r\n    );\r\n  }\r\n\r\n  /* Determine wavelet numbers. */\r\n  const waveletNumbers: ReadonlyArray<number> =\r\n      scalingNumbers.slice() // Copy array\r\n      .reverse()\r\n      .map((value, index) => (index % 2 === 0) ? value : -value);\r\n  \r\n  /* Determine wavelet basis. */\r\n  return {\r\n    dec: {\r\n      low: scalingNumbers.slice(),\r\n      high: waveletNumbers.slice(),\r\n    },\r\n    rec: {\r\n      low: scalingNumbers.slice(),\r\n      high: waveletNumbers.slice()\r\n    },\r\n  };\r\n}\r\n","export {\r\n  PaddingMode,\r\n  PaddingModes,\r\n  PaddingWidths,\r\n} from './padding/padding';\r\n\r\nexport {\r\n  Filters,\r\n  Wavelet,\r\n  WaveletBasis,\r\n  WaveletType,\r\n} from './wavelets/wavelets';\r\n\r\nimport {\r\n  add,\r\n  assertValidApproxDetail,\r\n  assertValidCoeffs,\r\n  assertValidFilters,\r\n  basisFromWavelet,\r\n  createArray,\r\n  dot,\r\n  mulScalar,\r\n  padElement,\r\n  padWidths,\r\n} from './helpers';\r\n\r\nimport {\r\n  PADDING_MODES,\r\n  PaddingMode,\r\n  PaddingModes,\r\n  PaddingWidths,\r\n} from './padding/padding';\r\n\r\nimport {\r\n  Filters,\r\n  Wavelet,\r\n  WaveletBasis,\r\n} from \"./wavelets/wavelets\";\r\n\r\n/**\r\n * Default padding mode to use.\r\n */\r\nconst DEFAULT_PADDING_MODE: PaddingMode = PADDING_MODES.symmetric;\r\n\r\n/**\r\n * Collection of methods for Discrete Wavelet Transform (DWT).\r\n */\r\nexport default class DiscreteWavelets {\r\n  /**\r\n   * Contains static information about the signal extension modes.\r\n   */\r\n  static readonly Modes: Readonly<PaddingModes> = PADDING_MODES;\r\n\r\n  /**\r\n   * Single level Discrete Wavelet Transform.\r\n   *\r\n   * @param  data    Input data.\r\n   * @param  wavelet Wavelet to use.\r\n   * @param  mode    Signal extension mode.\r\n   * @return         Approximation and detail coefficients as result of the transform.\r\n   */\r\n  static dwt(\r\n    data: ReadonlyArray<number>,\r\n    wavelet: Readonly<Wavelet>,\r\n    mode: PaddingMode = DEFAULT_PADDING_MODE\r\n  ): number[][] {\r\n    /* Determine wavelet basis and filters. */\r\n    const waveletBasis: Readonly<WaveletBasis> = basisFromWavelet(wavelet);\r\n    const filters: Readonly<Filters> = waveletBasis.dec;\r\n    assertValidFilters(filters);\r\n    const filterLength: number = filters.low.length;\r\n\r\n    /* Add padding. */\r\n    data = this.pad(data, padWidths(data.length, filterLength), mode);\r\n\r\n    /* Initialize approximation and detail coefficients. */\r\n    let approx: number[] = [];\r\n    let detail: number[] = [];\r\n\r\n    /* Calculate coefficients. */\r\n    for (let offset: number = 0; offset + filterLength <= data.length; offset += 2) {\r\n      /* Determine slice of values. */\r\n      const values: ReadonlyArray<number> = data.slice(offset, offset + filterLength);\r\n\r\n      /* Calculate approximation coefficients. */\r\n      approx.push(dot(values, filters.low));\r\n\r\n      /* Calculate detail coefficients. */\r\n      detail.push(dot(values, filters.high));\r\n    }\r\n\r\n    /* Return approximation and detail coefficients. */\r\n    return [approx, detail];\r\n  }\r\n\r\n  /**\r\n   * Calculates the energy as sum of squares of an array of data or\r\n   * coefficients.\r\n   *\r\n   * @param  values Array of data or coefficients.\r\n   * @return        Energy of values as the sum of squares.\r\n   */\r\n  static energy(values: ReadonlyArray<number> | ReadonlyArray<ReadonlyArray<number>>): number {\r\n    let energy: number = 0;\r\n    for (const value of values) {\r\n      if (typeof value === \"number\") energy += Math.pow(value, 2);\r\n      else energy += this.energy(value);\r\n    }\r\n    return energy;\r\n  }\r\n\r\n  /**\r\n   * Single level inverse Discrete Wavelet Transform.\r\n   *\r\n   * @param  approx  Approximation coefficients. If undefined, it will be set to an array of zeros with length equal to the detail coefficients.\r\n   * @param  detail  Detail coefficients. If undefined, it will be set to an array of zeros with length equal to the approximation coefficients.\r\n   * @param  wavelet Wavelet to use.\r\n   * @return         Approximation coefficients of previous level of transform.\r\n   */\r\n  static idwt(\r\n    approx: ReadonlyArray<number> | undefined,\r\n    detail: ReadonlyArray<number> | undefined,\r\n    wavelet: Wavelet\r\n  ): number[] {\r\n    /* Fill empty array with zeros. */\r\n    if (approx === undefined && detail !== undefined) {\r\n      approx = createArray(detail.length, 0);\r\n    }\r\n    if (detail === undefined && approx !== undefined) {\r\n      detail = createArray(approx.length, 0);\r\n    }\r\n\r\n    /* Check if some coefficients are undefined. */\r\n    if (approx === undefined || detail === undefined) {\r\n      throw new Error(\"Coefficients must not be undefined.\");\r\n    }\r\n\r\n    assertValidApproxDetail(approx, detail);\r\n\r\n    /* Determine wavelet basis and filters. */\r\n    const waveletBasis: Readonly<WaveletBasis> = basisFromWavelet(wavelet);\r\n    const filters: Readonly<Filters> = waveletBasis.rec;\r\n    assertValidFilters(filters);\r\n    const filterLength: number = filters.low.length;\r\n\r\n    /* Initialize transform. */\r\n    const coeffLength: number = approx.length;\r\n    let pad: ReadonlyArray<number> = createArray(filterLength + (coeffLength - 1) * 2, 0);\r\n\r\n    /* Perform inverse Discrete Wavelet Transform. */\r\n    for (let i = 0; i < coeffLength; i++) {\r\n      const offset: number = 2 * i;\r\n\r\n      /* Calculate values. */\r\n      let values: ReadonlyArray<number> = pad.slice(offset, offset + filterLength);\r\n      values = add(values, mulScalar(approx[i], filters.low));\r\n      values = add(values, mulScalar(detail[i], filters.high));\r\n\r\n      /* Update values. */\r\n      pad = pad\r\n        .slice(0, offset)\r\n        .concat(values)\r\n        .concat(pad.slice(offset + values.length));\r\n    }\r\n\r\n    /* Remove padding. */\r\n    return pad.slice(filterLength - 2, pad.length - (filterLength - 2));\r\n  }\r\n\r\n  /**\r\n   * Determines the maximum level of useful decomposition.\r\n   *\r\n   * @param  dataLength Length of input data.\r\n   * @param  wavelet    Wavelet to use.\r\n   * @return            Maximum useful level of decomposition.\r\n   */\r\n  static maxLevel(dataLength: number, wavelet: Readonly<Wavelet>): number {\r\n    /* Check for non-integer length. */\r\n    if (!Number.isInteger(dataLength)) {\r\n      throw new Error(\"Length of data is not an integer. This is not allowed.\");\r\n    }\r\n\r\n    /* Check for invalid input. */\r\n    if (dataLength < 0) {\r\n      throw new Error(\"Data length cannot be less than zero.\");\r\n    }\r\n\r\n    /* Return zero for data of zero length. */\r\n    if (dataLength === 0) return 0;\r\n\r\n    /* Determine wavelet basis. */\r\n    const waveletBasis: Readonly<WaveletBasis> = basisFromWavelet(wavelet);\r\n\r\n    /* Determine length of filter. */\r\n    const filterLength: number = waveletBasis.dec.low.length;\r\n\r\n    // SOURCE: https://pywavelets.readthedocs.io/en/latest/ref/dwt-discrete-wavelet-transform.html#maximum-decomposition-level-dwt-max-level-dwtn-max-level\r\n    return Math.max(0, Math.floor(Math.log2(dataLength / (filterLength - 1))));\r\n  }\r\n\r\n  /**\r\n   * Extends a signal with a given padding mode.\r\n   *\r\n   * @param  data      Input data.\r\n   * @param  padWidths Widths of padding at front and back.\r\n   * @param  mode      Signal extension mode.\r\n   * @return           Data with padding.\r\n   */\r\n  static pad(\r\n    data: ReadonlyArray<number>,\r\n    padWidths: Readonly<PaddingWidths>,\r\n    mode: PaddingMode\r\n  ): number[] {\r\n    /* Check for undefined data. */\r\n    if (!data) {\r\n      throw new Error(\"Cannot add padding to empty data.\");\r\n    }\r\n\r\n    /* Initialize. */\r\n    const front: number = padWidths[0];\r\n    const back: number = padWidths[1];\r\n\r\n    /* Add padding. */\r\n    return createArray(front, (index) => padElement(data, front - 1 - index, true, mode))\r\n      .concat(data)\r\n      .concat(createArray(back, (index) => padElement(data, index, false, mode)));\r\n  }\r\n\r\n  /**\r\n   * 1D wavelet decomposition. Transforms data by calculating coefficients from\r\n   * input data.\r\n   *\r\n   * @param  data    Input data.\r\n   * @param  wavelet Wavelet to use.\r\n   * @param  mode    Signal extension mode.\r\n   * @param  level   Decomposition level. Defaults to level calculated by maxLevel function.\r\n   * @return         Coefficients as result of the transform.\r\n   */\r\n  static wavedec(\r\n    data: ReadonlyArray<number>,\r\n    wavelet: Readonly<Wavelet>,\r\n    mode: PaddingMode = DEFAULT_PADDING_MODE,\r\n    level?: number\r\n  ): number[][] {\r\n    /* Determine decomposition level. */\r\n    if (level === undefined) level = this.maxLevel(data.length, wavelet);\r\n    if (level < 0) {\r\n      throw new Error(\"Decomposition level must not be less than zero\");\r\n    }\r\n\r\n    /*  Initialize transform. */\r\n    let coeffs: number[][] = [];\r\n    let approx: ReadonlyArray<number> = data.slice();\r\n\r\n    /* Transform. */\r\n    for (let l: number = 1; l <= level; l++) {\r\n      /* Perform single level transform. */\r\n      const approxDetail: ReadonlyArray<ReadonlyArray<number>> = this.dwt(approx, wavelet, mode);\r\n      approx = approxDetail[0];\r\n      const detail: ReadonlyArray<number> = approxDetail[1];\r\n\r\n      /* Prepend detail coefficients. */\r\n      coeffs.unshift(detail.slice());\r\n    }\r\n\r\n    /* Prepend last approximation. */\r\n    coeffs.unshift(approx.slice());\r\n\r\n    /* Return coefficients. */\r\n    return coeffs;\r\n  }\r\n\r\n  /**\r\n   * 1D wavelet reconstruction. Inverses a transform by calculating input data\r\n   * from coefficients.\r\n   *\r\n   * @param  coeffs  Coefficients as result of a transform.\r\n   * @param  wavelet Wavelet to use.\r\n   * @return         Input data as result of the inverse transform.\r\n   */\r\n  static waverec(coeffs: ReadonlyArray<ReadonlyArray<number>>, wavelet: Wavelet): number[] {\r\n    /* Check if coefficients are valid. */\r\n    assertValidCoeffs(coeffs);\r\n\r\n    /* Determine wavelet. */\r\n    wavelet = basisFromWavelet(wavelet);\r\n\r\n    /* Initialize transform. */\r\n    let approx: ReadonlyArray<number> = coeffs[0];\r\n\r\n    /* Transform. */\r\n    for (let i: number = 1; i < coeffs.length; i++) {\r\n      /* Initialize detail coefficients. */\r\n      const detail: ReadonlyArray<number> = coeffs[i];\r\n\r\n      // TODO: Check if problem of different coefficient lengths because of padding can be solved in a more elegant way.\r\n      if (approx.length === detail.length + 1) {\r\n        approx = approx.slice(0, approx.length - 1);\r\n      }\r\n\r\n      /* Calculate previous level of approximation. */\r\n      approx = this.idwt(approx, detail, wavelet);\r\n    }\r\n\r\n    /* Return data. */\r\n    return approx.slice();\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}